package LinkedList;

import LinkedList.DoublyLinkedList.Neighbor;

public class DoublyLinkedList {
	
	Neighbor firstLink;
	Neighbor lastLink;
	
	public void insertInFirstPosition(String homeOwner , int houseNumber)
	{
		Neighbor theNewLink = new Neighbor(homeOwner, houseNumber);
		if(isEmpty())
		{
			lastLink = theNewLink;
		}
		
		else 
		{
			firstLink.previous = theNewLink;
		}
		
		theNewLink.next=firstLink;
		firstLink=theNewLink;
		
	}
	
	
	public void insertInLastPosition(String homeOwner , int houseNumber)
	{
		Neighbor theNewLink = new Neighbor(homeOwner, houseNumber);
		if(isEmpty())
		{
			firstLink = theNewLink;
		}
		else
		{
		lastLink.next=theNewLink;	
		theNewLink.previous = lastLink;
	}
		lastLink = theNewLink;

}
	public boolean isEmpty()
	{
		return (firstLink==null);
	}

	
	public boolean insertAfterKey(String homeOwnerName , int houseNumber , int key)
	{
		Neighbor theNewLink = new Neighbor(homeOwnerName, houseNumber);
		Neighbor currentNeighbor = firstLink;
		
		while(currentNeighbor.houseNumber !=key)
		{
			currentNeighbor= currentNeighbor.next;
			if(currentNeighbor ==null)
			{
				return false;
			}
		}
		
		if(currentNeighbor == lastLink)
		{
			theNewLink.next=null;
			lastLink=theNewLink;
		}
		else
		{
			theNewLink.next=currentNeighbor.next;
			currentNeighbor.next.previous=theNewLink;
		}
		theNewLink.previous = currentNeighbor;
		currentNeighbor.next=theNewLink;
		return true;
	} 
	
	public void insertInOrder(String homeOwnerName , int houseNumber)
	{
		Neighbor theNewLink= new Neighbor(homeOwnerName, houseNumber);
		Neighbor previousNeighbor = null;
		Neighbor currentNeighbor = firstLink;
		
		while((currentNeighbor!=null) && (houseNumber>currentNeighbor.houseNumber))
		{
			previousNeighbor=currentNeighbor;
			currentNeighbor = currentNeighbor.next;
		}
		if(previousNeighbor ==null)
		{
			firstLink = theNewLink;
		}
		else
		{
			previousNeighbor.next = theNewLink;
		}
		
		theNewLink.next = currentNeighbor;
	}
	
	public static void main(String[] args) {
		DoublyLinkedList theLinkedList = new DoublyLinkedList();
		
	/*	theLinkedList.insertInFirstPosition("house owner1", 001);
		theLinkedList.insertInFirstPosition("house owner2", 002);
		theLinkedList.insertInLastPosition("house owner3", 003);
		theLinkedList.insertInFirstPosition("house owner4", 004);
		
		theLinkedList.display();*/
		
		
		//--------DoublyLinkedList
		/*theLinkedList.insertInOrder("house owner1", 001);
		theLinkedList.insertInOrder("house owner2", 002);
		theLinkedList.insertInOrder("house owner3", 003);
		theLinkedList.insertInOrder("house owner4", 004);
		
		theLinkedList.insertAfterKey("house owner5", 005, 002);
		theLinkedList.display();*/
		
		//---------Iterator run-------------
		NeighborIterator Neighbors = new NeighborIterator(theLinkedList);
		Neighbors.currentNeighbor.display();
		System.out.println(Neighbors.hasNext());
		
		Neighbors.next();
		Neighbors.currentNeighbor.display();
		Neighbors.remove();
				
		
	}
	public void display()
	{
		Neighbor theLink = firstLink;
		while (theLink!=null) {
			theLink.display();
			System.out.println("Next Link : "+theLink.next);
			theLink = theLink.next;
			
		}
	}
class Neighbor  
{
	public String homeOwnerName;
	public int houseNumber;
	
	public Neighbor next;
	public Neighbor previous;
	
	public Neighbor(String homeOwnerName, int houseNumber) {
		// TODO Auto-generated constructor stub
		this.homeOwnerName=homeOwnerName;
		this.houseNumber=houseNumber;
	}


public void display()
{
	System.out.println(homeOwnerName + ":"+houseNumber + "privet Drive");
}

public String toString()
{
	return homeOwnerName;
	
}
}
}

class NeighborIterator
{
	Neighbor currentNeighbor;
	Neighbor previousNeighbor;
	
	DoublyLinkedList theNeighbors;
	
	
	public NeighborIterator(DoublyLinkedList theNeighbors) {
		// TODO Auto-generated constructor stub
	this.theNeighbors=theNeighbors;
	currentNeighbor=theNeighbors.firstLink;
	previousNeighbor =  theNeighbors.lastLink;
	
		
	}
	
	public boolean hasNext()
	{
		if(currentNeighbor.next!=null)
		{
			return true;
		}
		return false;
	}
	public Neighbor next()
	{
		if(hasNext())
		{
			previousNeighbor=currentNeighbor;
			currentNeighbor=currentNeighbor.next;
			return currentNeighbor;
		}
		return null;
	}
	
	public void remove()
	{
		if(previousNeighbor==null)
		{
			theNeighbors.firstLink=currentNeighbor.next;
		}
		else
		{
			previousNeighbor.next=currentNeighbor.next;
			if(currentNeighbor.next==null)
			{
				currentNeighbor=theNeighbors.firstLink;
				previousNeighbor=null;
			}
			else
			{
				currentNeighbor=currentNeighbor.next;
			}
		}
	} 
}