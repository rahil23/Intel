package Tree;

public class BinaryTree {
	
	Node root;
	
	public void addNode(int key,String name)
	{
		Node newNode = new Node(key,name);
		if(root == null)
		{
			root=newNode;
		}
		else
		{
			Node focusNode = root;
			Node parent;
			while(true)
			{
				parent = focusNode;
				if(key<focusNode.key)
				{
					focusNode = focusNode.leftChild;
					if(focusNode==null)
					{
						parent.leftChild = newNode;
						return;
					}
				}
				else
				{
					focusNode=focusNode.RightChild;
					if(focusNode==null)
					{
						parent.RightChild = newNode;
						return;
					}
				}
			}
		}
	}
	
	public void inOrderTraverseTree(Node focusNode)
	{
		if(focusNode != null)
		{
			inOrderTraverseTree(focusNode.leftChild);
			System.out.println(focusNode);
			inOrderTraverseTree(focusNode.RightChild);
		}
	}
	public static void main(String[] args) {
		
		BinaryTree theTree = new BinaryTree();
		theTree.addNode(50, "Boss");
		theTree.addNode(25, "vide preiedent");
		theTree.addNode(15, "officeManager");
		theTree.addNode(30, "seceratory");
		theTree.addNode(75, "Sales Manager");
		theTree.addNode(85, "sales person");
		theTree.inOrderTraverseTree(theTree.root);
		
	}

	
}

class Node
{
	int key;
	String name;
	
	Node leftChild;
	Node RightChild;
	
	public Node(int key , String Name) {
		// TODO Auto-generated constructor stub
		 this.key=key;
		 this.name=name;
	}
	
	public String toString()
	{
		return name +"has a key"+key;
		
	}
	
}
