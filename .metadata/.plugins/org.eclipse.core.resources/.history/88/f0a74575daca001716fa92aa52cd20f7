package LinkedList;

import LinkedList.DoublyLinkedList.Neighbour;

public class DoublyLinkedList {
	
	Neighbour firstLink;
	Neighbour lastLink;
	
	public void insertInFirstPosition(String homeOwner , int houseNumber)
	{
		Neighbour theNewLink = new Neighbour(homeOwner, houseNumber);
		if(isEmpty())
		{
			lastLink = theNewLink;
		}
		
		else 
		{
			firstLink.previous = theNewLink;
		}
		
		theNewLink.next=firstLink;
		firstLink=theNewLink;
		
	}
	
	
	public void insertInLastPosition(String homeOwner , int houseNumber)
	{
		Neighbour theNewLink = new Neighbour(homeOwner, houseNumber);
		if(isEmpty())
		{
			firstLink = theNewLink;
		}
		else
		{
		lastLink.next=theNewLink;	
		theNewLink.previous = lastLink;
	}
		lastLink = theNewLink;

}
	public boolean isEmpty()
	{
		return (firstLink==null);
	}

	
	public boolean insertAfterKey(String homeOwnerName , int houseNumber , int key)
	{
		Neighbour theNewLink = new Neighbour(homeOwnerName, houseNumber);
		Neighbour currentNeighbour = firstLink;
		
		while(currentNeighbour.houseNumber !=key)
		{
			currentNeighbour= currentNeighbour.next;
			if(currentNeighbour ==null)
			{
				return false;
			}
		}
		
		if(currentNeighbour == lastLink)
		{
			theNewLink.next=null;
			lastLink=theNewLink;
		}
		else
		{
			theNewLink.next=currentNeighbour.next;
			currentNeighbour.next.previous=theNewLink;
		}
		theNewLink.previous = currentNeighbour;
		currentNeighbour.next=theNewLink;
		return true;
	} 
	
	public void insertInOrder(String homeOwnerName , int houseNumber)
	{
		Neighbour theNewLink= new Neighbour(homeOwnerName, houseNumber);
		Neighbour previousNeighbour = null;
		Neighbour currentNeighbour = firstLink;
		
		while((currentNeighbour!=null) && (houseNumber>currentNeighbour.houseNumber))
		{
			previousNeighbour=currentNeighbour;
			currentNeighbour = currentNeighbour.next;
		}
		if(previousNeighbour ==null)
		{
			firstLink = theNewLink;
		}
		else
		{
			previousNeighbour.next = theNewLink;
		}
		
		theNewLink.next = currentNeighbour;
	}
	
	public static void main(String[] args) {
		DoublyLinkedList obj = new DoublyLinkedList();
		
	/*	obj.insertInFirstPosition("house owner1", 001);
		obj.insertInFirstPosition("house owner2", 002);
		obj.insertInLastPosition("house owner3", 003);
		obj.insertInFirstPosition("house owner4", 004);
		
		obj.display();*/
		
		
		//--------DoublyLinkedList
		obj.insertInOrder("house owner1", 001);
		obj.insertInOrder("house owner2", 002);
		obj.insertInOrder("house owner3", 003);
		obj.insertInOrder("house owner4", 004);
		
		obj.insertAfterKey("house owner5", 005, 002);
		obj.display();
		
		
	}
	public void display()
	{
		Neighbour theLink = firstLink;
		while (theLink!=null) {
			theLink.display();
			System.out.println("Next Link : "+theLink.next);
			theLink = theLink.next;
			
		}
	}
class Neighbour  
{
	public String homeOwnerName;
	public int houseNumber;
	
	public Neighbour next;
	public Neighbour previous;
	
	public Neighbour(String homeOwnerName, int houseNumber) {
		// TODO Auto-generated constructor stub
		this.homeOwnerName=homeOwnerName;
		this.houseNumber=houseNumber;
	}


public void display()
{
	System.out.println(homeOwnerName + ":"+houseNumber + "privet Drive");
}

public String toString()
{
	return homeOwnerName;
	
}
}
}

class NeighbourIterator
{
	Neighbour currentNeighbour;
	Neighbour previousNeighbour;
	
	DoublyLinkedList theNeighbours;
	
	
	public NeighbourIterator(DoublyLinkedList theNeighbours) {
		// TODO Auto-generated constructor stub
	this.theNeighbours=theNeighbours;
	currentNeighbour=theNeighbours.firstLink;
	previousNeighbour =  theNeighbours.lastLink;
	
		
	}
	
	public boolean hasNext()
	{
		if(currentNeighbour.next!=null)
		{
			return true;
		}
		return false;
	}
	public Neighbour next()
	{
		if(hasNext())
		{
			previousNeighbour=currentNeighbour;
			currentNeighbour=currentNeighbour.next;
			return currentNeighbour;
		}
		return null;
	}
	
	public void remove()
	{
		if(previousNeighbour==null)
		{
			theNeighbours.firstLink=currentNeighbour.next;
		}
		else
		{
			previousNeighbour.next=currentNeighbour.next;
			if(currentNeighbour.next==null)
			{
				currentNeighbour=theNeighbours.firstLink;
				previousNeighbour=null;
			}
			else
			{
				currentNeighbour=currentNeighbour.next;
			}
		}
	} 
}